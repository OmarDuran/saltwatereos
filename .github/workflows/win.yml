name: Windows
on: 
  push:
    branches: master
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: Library/build

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
jobs:
  buildApp:
    name: library
    runs-on: windows-latest
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # - name: install dependence
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install -y tcl-dev
      # - name: Set up Python 3.9
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: 3.9
      # - name: info
      #   run: |
      #     cmake --version
      #     g++ --version
      #     which tclsh
      #     which python
      - name: compile library
        run: |
          mkdir Library/build
          cd Library/build
          cmake -DBuild_API_MultiLanguage=OFF ..
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: |
          dir D:/a/saltwatereos/saltwatereos/Library/build
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      #     make install
      #     cd ../..
      # - name: build command line app
      #   run: |
      #     mkdir -p commandline/build
      #     cd commandline/build
      #     cmake ..
      #     make 
      # - name: package
      #   run: |
      #     mkdir libs_ubuntu
      #     cp -rf Library/lib libs_ubuntu/
      #     cp -rf Library/API libs_ubuntu/
      #     cp -rf Library/include libs_ubuntu/
      #     cp commandline/build/swEOS libs_ubuntu/
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: libs_ubuntu.zip
      #     path: libs_ubuntu
