name: Windows
on: 
  push:
    branches: master
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: Library\build

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
jobs:
  buildApp:
    name: library
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      # checkout source code
      - uses: actions/checkout@v2
      # - name: Add MSBuild to PATH
      #   uses: microsoft/setup-msbuild@v1
      # - name: Restore NuGet packages
      #   working-directory: ${{env.GITHUB_WORKSPACE}}
      #   run: nuget restore ${{env.SOLUTION_FILE_PATH}}
      # - name: Install Qt
      #   uses: jurplel/install-qt-action@v2
      #   with:
      #     version: '5.15.2'
      #     host: 'windows'
      #     target: 'desktop'
      #     dir: '${{ github.workspace }}/QT/'
      # use mingw shell env
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain
      - name: install dependence
        run: |
          svn checkout https://github.com/swig/swig/trunk swig
          cd swig
          echo $SHELL
          ./autogen.sh
          ./configure --prefix=/usr/local/swig --without-pcre
          make
          make install
          cd D:/a/saltwatereos/saltwatereos
      # - name: compile library
      #   run: |
      #     mkdir Library/build
      #     cd Library/build
      #     # cmake -DBuild_API_MultiLanguage=OFF ..
      #     cmake -DSWIG_EXECUTABLE=/usr/local/swig/bin/swig.exe -DBuild_API_tcl=OFF -G "MinGW Makefiles" ..
      #     # cmake -DBuild_API_MultiLanguage=OFF .. -G "MinGW Makefiles"
      #     mingw32-make.exe install
      # # - name: Build
      # #   working-directory: ${{env.GITHUB_WORKSPACE}}
      # #   run: |
      # #     msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}\eosH2ONaCl.sln
      # #     mkdir ${{env.SOLUTION_FILE_PATH}}\..\lib
      # #     cp ${{env.SOLUTION_FILE_PATH}}\Release\*.lib ${{env.SOLUTION_FILE_PATH}}\..\lib\
      # - name: cmake cmd app
      #   run: |
      #     mkdir ${{env.SOLUTION_FILE_PATH}}\..\..\commandline\build
      #     cd ${{env.SOLUTION_FILE_PATH}}\..\..\commandline\build
      #     cmake -G "MinGW Makefiles" ..
      #     mingw32-make.exe
      # # - name: Build cmd app
      # #   working-directory: ${{env.GITHUB_WORKSPACE}}
      # #   run: |
      # #     # msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}\..\..\commandline\build\SaltWaterEOS.sln
      # debug workflow through ssh
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      # - name: package
      #   run: |
      #     mkdir swEOS_windows
      #     cp ${{env.SOLUTION_FILE_PATH}}\Release\*.lib swEOS_windows\
      #     cp ${{env.SOLUTION_FILE_PATH}}\..\..\commandline\build\Release\*.exe swEOS_windows\
      # - name: test cmd app
      #   run: ${{env.SOLUTION_FILE_PATH}}\..\..\commandline\build\SaltWaterEOS.exe -h
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: swEOS_windows.zip
      #     path: swEOS_windows
      
      